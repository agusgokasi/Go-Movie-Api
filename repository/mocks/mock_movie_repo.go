// Code generated by MockGen. DO NOT EDIT.
// Source: MovieApi/repository (interfaces: MovieRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "MovieApi/model"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockMovieRepo is a mock of MovieRepo interface.
type MockMovieRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMovieRepoMockRecorder
}

// MockMovieRepoMockRecorder is the mock recorder for MockMovieRepo.
type MockMovieRepoMockRecorder struct {
	mock *MockMovieRepo
}

// NewMockMovieRepo creates a new mock instance.
func NewMockMovieRepo(ctrl *gomock.Controller) *MockMovieRepo {
	mock := &MockMovieRepo{ctrl: ctrl}
	mock.recorder = &MockMovieRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieRepo) EXPECT() *MockMovieRepoMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method.
func (m *MockMovieRepo) CreateMovie(arg0 model.Movie) (model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", arg0)
	ret0, _ := ret[0].(model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockMovieRepoMockRecorder) CreateMovie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockMovieRepo)(nil).CreateMovie), arg0)
}

// DeleteMovie mocks base method.
func (m *MockMovieRepo) DeleteMovie(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockMovieRepoMockRecorder) DeleteMovie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockMovieRepo)(nil).DeleteMovie), arg0)
}

// GetMovieById mocks base method.
func (m *MockMovieRepo) GetMovieById(arg0 uint64) (model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieById", arg0)
	ret0, _ := ret[0].(model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieById indicates an expected call of GetMovieById.
func (mr *MockMovieRepoMockRecorder) GetMovieById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieById", reflect.TypeOf((*MockMovieRepo)(nil).GetMovieById), arg0)
}

// GetMovies mocks base method.
func (m *MockMovieRepo) GetMovies(arg0, arg1 int) (gin.H, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovies", arg0, arg1)
	ret0, _ := ret[0].(gin.H)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovies indicates an expected call of GetMovies.
func (mr *MockMovieRepoMockRecorder) GetMovies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovies", reflect.TypeOf((*MockMovieRepo)(nil).GetMovies), arg0, arg1)
}

// UpdateMovie mocks base method.
func (m *MockMovieRepo) UpdateMovie(arg0 model.Movie) (model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", arg0)
	ret0, _ := ret[0].(model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockMovieRepoMockRecorder) UpdateMovie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockMovieRepo)(nil).UpdateMovie), arg0)
}
